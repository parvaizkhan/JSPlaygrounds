{"version":3,"sources":["components/Viewer.js","selectors/parse_expressions.js","serviceWorker.js","index.js","actions/types.js","components/Editor.js","actions/index.js","reducers/code_reducer.js","App.js"],"names":["lodash__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","lodash__WEBPACK_IMPORTED_MODULE_0___default","n","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","_selectors_parse_expressions__WEBPACK_IMPORTED_MODULE_2__","react_split_pane__WEBPACK_IMPORTED_MODULE_3__","_App__WEBPACK_IMPORTED_MODULE_4__","getExpressions","state","expressions","errors","parseExpressions","e","toString","evaluateExpressions","formattedExpressions","_","mapValues","expression","result","eval","type","isFunction","name","a","createElement","isBoolean","isObject","isArray","JSON","stringify","map","line","key","__webpack_exports__","store","useContext","StoreContext","_getExpressions","getState","defaultHeight","window","innerHeight","split","defaultSize","className","reselect__WEBPACK_IMPORTED_MODULE_1__","_babel_standalone__WEBPACK_IMPORTED_MODULE_2__","_babel_standalone__WEBPACK_IMPORTED_MODULE_2___default","esprima__WEBPACK_IMPORTED_MODULE_3__","esprima__WEBPACK_IMPORTED_MODULE_3___default","codeSelector","code","OPEN_DELIMITERS","CLOSE_DELIMITERS","DELIMITER_MAP",")","}","]","`","findDelimiters","_ref","lineContents","column","intersection","takeRight","length","transformedCode","transform","presets","codeByLine","tokenized","esprima","loc","parens","(","{","[","wasOpen","exp","reduce","_ref2","index","value","end","lineNumber","lineHasMoreDelimiters","includes","every","count","take","join","createSelector","Boolean","location","hostname","match","require","ReactDOM","render","react_default","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","DID_UPDATE_CODE","Editor","react_codemirror2","options","lineNumbers","mode","tabSize","onBeforeChange","editor","data","dispatch","console","clear","payload","updateCode","code_reducer","action","React","createContext","_useReducer","useReducer","codeReducer","_useReducer2","Object","slicedToArray","width","Provider","index_esm","components_Editor","Viewer"],"mappings":"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","file":"static/js/main.ade526dd.chunk.js","sourcesContent":["import _ from 'lodash';\r\nimport React, { useContext } from 'react';\r\nimport parseExpressions from '../selectors/parse_expressions';\r\nimport SplitPane from 'react-split-pane';\r\nimport { StoreContext } from '../App'\r\n\r\nconst getExpressions = state => {\r\n    let expressions, errors;\r\n\r\n    try {\r\n        expressions = parseExpressions(state);\r\n    } catch (e) {\r\n        errors = e.toString();\r\n    }\r\n\r\n    return { expressions, errors };\r\n}\r\n\r\nconst evaluateExpressions = expressions => {\r\n    const formattedExpressions = _.mapValues(expressions, expression => {\r\n        // eslint-disable-next-line\r\n        const result = eval(expression);\r\n        if (result && result.type) {\r\n            return result;\r\n        } else if (_.isFunction(result) && result.name) {\r\n            return <i>Function {result.name}</i>;\r\n        } else if (_.isBoolean(result)) {\r\n            return result ? 'True' : 'False';\r\n        } else if (_.isObject(result) || _.isArray(result)) {\r\n            return JSON.stringify(result);\r\n        }\r\n\r\n        return result;\r\n    });\r\n\r\n    return _.map(formattedExpressions, (expression, line) =>\r\n        <div key={line}>{expression}</div>\r\n    );\r\n}\r\n\r\nexport default () => {\r\n\r\n    const store = useContext(StoreContext)\r\n\r\n    const { expressions, errors } = getExpressions(store.getState())\r\n\r\n    const defaultHeight = window.innerHeight / 1.3;\r\n\r\n    return (\r\n        <SplitPane split=\"horizontal\" defaultSize={defaultHeight} className=\"viewer\">\r\n            <div className=\"result\">\r\n                {evaluateExpressions(expressions)}\r\n            </div>\r\n            <div className=\"errors\">\r\n                {errors}\r\n            </div>\r\n        </SplitPane>\r\n    )\r\n}\r\n","import _ from 'lodash';\r\nimport { createSelector } from 'reselect';\r\nimport { transform } from '@babel/standalone';\r\nimport * as esprima from 'esprima';\r\n\r\nconst codeSelector = state => state.code;\r\nconst OPEN_DELIMITERS = ['(', '{', '[', '`'];\r\nconst CLOSE_DELIMITERS = [')', '}', ']', '`'];\r\nconst DELIMITER_MAP = {\r\n  ')': '(',\r\n  '}': '{',\r\n  ']': '[',\r\n  '`': '`'\r\n};\r\n\r\nconst findDelimiters = ({ column }, lineContents) => {\r\n  return _.intersection(_.takeRight(lineContents, lineContents.length - column), OPEN_DELIMITERS).length\r\n}\r\n\r\nconst parseExpressions = (code) => {\r\n  const transformedCode = transform(code, { presets: ['react'] }).code;\r\n  const codeByLine = transformedCode.split('\\n');\r\n  const tokenized = esprima.tokenize(transformedCode, { loc: true });\r\n  const parens = { '(': 0, '{': 0, '[': 0 };\r\n  let wasOpen = false;\r\n  const exp = _.reduce(tokenized, (expressions, { value, loc: { end } }, index) => {\r\n    const lineNumber = end.line;\r\n    const lineContents = codeByLine[lineNumber - 1];\r\n    const lineHasMoreDelimiters = findDelimiters(end, lineContents);\r\n\r\n    if (expressions[lineNumber]) { return expressions; }\r\n\r\n    if (OPEN_DELIMITERS.includes(value)) {\r\n      parens[value] += 1;\r\n      wasOpen = true;\r\n    }\r\n\r\n    if (CLOSE_DELIMITERS.includes(value)) {\r\n      parens[DELIMITER_MAP[value]] -= 1;\r\n    }\r\n\r\n    if (!lineHasMoreDelimiters && wasOpen && _.every(parens, count => count === 0)) {\r\n      wasOpen = false;\r\n      expressions[lineNumber] = _.take(codeByLine, lineNumber).join('\\n');\r\n\r\n      return expressions;\r\n    }\r\n\r\n    if (!lineHasMoreDelimiters && _.every(parens, count => count === 0)) {\r\n      expressions[lineNumber] = _.take(codeByLine, lineNumber).join('\\n');\r\n\r\n      return expressions;\r\n    }\r\n\r\n    return expressions;\r\n  }, {});\r\n\r\n  // eslint-disable-next-line\r\n  eval(transformedCode);\r\n  return exp;\r\n}\r\n\r\nexport default createSelector(\r\n  codeSelector,\r\n  parseExpressions\r\n);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nrequire('./styles/style.css')\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","export const DID_UPDATE_CODE = 'did_update_code';\r\n","import React, { useContext } from 'react';\r\nimport { Controlled as CodeMirror } from 'react-codemirror2'\r\nimport 'codemirror/mode/jsx/jsx';\r\nimport { updateCode } from '../actions';\r\n\r\nimport { StoreContext } from '../App'\r\n\r\nrequire('codemirror/lib/codemirror.css');\r\nrequire('codemirror/theme/material.css');\r\nrequire('codemirror/theme/neat.css');\r\nrequire('codemirror/mode/xml/xml.js');\r\nrequire('codemirror/mode/javascript/javascript.js');\r\n\r\nconst Editor = () => {\r\n\r\n    const store = useContext(StoreContext)\r\n\r\n    const { code } = store.getState();\r\n\r\n    const onCodeChange = (editor, data, code) => {\r\n        store.dispatch(updateCode(code));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CodeMirror\r\n                value={code}\r\n                options={{ lineNumbers: true, mode: 'jsx', tabSize: 2 }}\r\n                onBeforeChange={onCodeChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Editor;","import {\r\n  DID_UPDATE_CODE\r\n} from './types';\r\n\r\nexport function updateCode(code) {\r\n  console.clear();\r\n\r\n  return {\r\n    type: DID_UPDATE_CODE,\r\n    payload: code\r\n  };\r\n}\r\n","import { DID_UPDATE_CODE } from '../actions/types';\r\n\r\nexport const INITIAL_STATE = '';\r\n\r\nexport default function (state, action) {\r\n    switch (action.type) {\r\n        case DID_UPDATE_CODE:\r\n            return action.payload\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React, { useReducer } from 'react'\r\nimport SplitPane from 'react-split-pane'\r\nimport Editor from './components/Editor'\r\nimport Viewer from './components/Viewer'\r\n\r\nimport codeReducer, { INITIAL_STATE } from './reducers/code_reducer';\r\n\r\nexport const StoreContext = React.createContext();\r\n\r\nexport default () => {\r\n\r\n  const [code, dispatch] = useReducer(codeReducer, INITIAL_STATE)\r\n\r\n  const store = {\r\n    getState: () => ({ code }),\r\n    dispatch\r\n  }\r\n\r\n  const width = window.innerHeight;\r\n\r\n  return (\r\n    <StoreContext.Provider value={store}>\r\n      <SplitPane split=\"vertical\" defaultSize={width}>\r\n        <Editor />\r\n        <Viewer />\r\n      </SplitPane>\r\n    </StoreContext.Provider>\r\n  )\r\n}\r\n"],"sourceRoot":""}